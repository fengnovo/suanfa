// BubbleSort.js
/**
对于一个有i个数字的序列，完成排序需要比较i-1轮，比果轮数记为j，
第j轮需要比较i-j次，需要两层循环，外循环控制轮数，内循环控制比较的次数。
**/
function bubbleSort(arr) {
	// arr.length是12，i=10是最后一个
	// i是对比轮数,为什么要arr.length - 1，因为从0开始
	for (let i = 0; i < arr.length - 1; i++) {
		// j是每轮对比次数，i=10，j最大要小于 12-1-10=1就是0
		for (let j = 0; j < arr.length - 1 - i; j++) {
			if (arr[j] > arr[j + 1]) {
				let temp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = temp;
			}
		}
		// console.log(i + ' ---> ', arr);
	}
	return arr;
}

console.log(bubbleSort([2, 4, 11, 25, 1, 24, 1555, 12, 29, 7, 5, 3]))
// [2,4,11,1,24,25,12,29,7,5,3,1555] 第一轮结果 ---> 最大的一个已经在最右边
// [2,4,1,11,24,12,25,7,5,3,29,1555] 第二轮结果 ---> 不用和最后一个比，第二大已经在最右边倒数第二个，少比较一次，所以-i
// [2,1,4,11,12,24,7,5,3,25,29,1555] 第三轮结果 ---> 不用和最后两个比，第三大已经在最右边倒数第三个，少比较一次，所以-i

/*
// 到arr.length - 1
0 ---> [2, 4, 11, 1, 24, 25, 12, 29, 7, 5, 3, 1555]
1 ---> [2, 4, 1, 11, 24, 12, 25, 7, 5, 3, 29, 1555]
2 ---> [2, 1, 4, 11, 12, 24, 7, 5, 3, 25, 29, 1555]
3 ---> [1, 2, 4, 11, 12, 7, 5, 3, 24, 25, 29, 1555]
4 ---> [1, 2, 4, 11, 7, 5, 3, 12, 24, 25, 29, 1555]
5 ---> [1, 2, 4, 7, 5, 3, 11, 12, 24, 25, 29, 1555]
6 ---> [1, 2, 4, 5, 3, 7, 11, 12, 24, 25, 29, 1555]
7 ---> [1, 2, 4, 3, 5, 7, 11, 12, 24, 25, 29, 1555]
8 ---> [1, 2, 3, 4, 5, 7, 11, 12, 24, 25, 29, 1555]
9 ---> [1, 2, 3, 4, 5, 7, 11, 12, 24, 25, 29, 1555]
10---> [1, 2, 3, 4, 5, 7, 11, 12, 24, 25, 29, 1555] // 到第11一次循环，

// 到arr.length
0 ---> [2, 4, 11, 1, 24, 25, 12, 29, 7, 5, 3, 1555]
1 ---> [2, 4, 1, 11, 24, 12, 25, 7, 5, 3, 29, 1555]
2 ---> [2, 1, 4, 11, 12, 24, 7, 5, 3, 25, 29, 1555]
3 ---> [1, 2, 4, 11, 12, 7, 5, 3, 24, 25, 29, 1555]
4 ---> [1, 2, 4, 11, 7, 5, 3, 12, 24, 25, 29, 1555]
5 ---> [1, 2, 4, 7, 5, 3, 11, 12, 24, 25, 29, 1555]
6 ---> [1, 2, 4, 5, 3, 7, 11, 12, 24, 25, 29, 1555]
7 ---> [1, 2, 4, 3, 5, 7, 11, 12, 24, 25, 29, 1555]
8 ---> [1, 2, 3, 4, 5, 7, 11, 12, 24, 25, 29, 1555]
9 ---> [1, 2, 3, 4, 5, 7, 11, 12, 24, 25, 29, 1555]
10---> [1, 2, 3, 4, 5, 7, 11, 12, 24, 25, 29, 1555]
11---> [1, 2, 3, 4, 5, 7, 11, 12, 24, 25, 29, 1555]

*/



